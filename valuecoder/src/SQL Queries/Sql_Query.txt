<--------------------   CRUD OPERATION   -------------------->

		<-----     CREATE OPERATION     ----->
					
		create database test;
		// here test is the database name
		// for using database
		use test;
		
		create table user(id int,name varchar(20),city varchar(20));
		create table school(sid int, sname varchar(20), saddress varchar(30));
		create table orderdetails (orderdetailid int, orderid int, productid int, quantity int);
		
		//for showing all tables
		show tables;
		
		//enter the data on the user table
		insert into user(id,name,city) values (1,'rishu','kanpur');
		insert into user(id,name,city) values (2,'vikku','gopalpur');
		insert into user(id,name,city) values (3,'anura','unnao');
		
		// for insert multiple row
		insert into user (id,name,city) values(4,'anuj','fajalganj'),(5,'sachin','bagahi');
		insert into orderdetails (orderdetailid, orderid, productid, quantity) values (1,10248,11,12),(2,10248,42,10),(3,10248,72,5),(4,10249,14,9),(5,10249,51,40);
		
		//enter data on school table
		insert into school (sid,sname,saddress) values(1,'sardar patel','barra');
		insert into school (sid,sname,saddress) values(2,'shubhash ismarak','saket nagar');
		insert into school (sid,sname,saddress) values(3,'mercy','k block');
	
		<-----     READ OPERATION     ----->
		
		// select * from table_name;
		select * from user;
		select * from school;
		select * from orderdetails;
		
	
		<-----     UPDATE OPERATION     ----->
		
		// for update specific user with id
		update user set name = 'anurag' where id =3 ;
		
	
		<-----     DELETE OPERATION     ----->
		
		// for delete specific user using id
		delete from user where id= 5;
		
		// for deleting all record
		delete from user;
		
		// for deleting database
		drop database test;
		
		// delete only delete specific record from the table using where condition
		// but we use drop command then all data and table structure everything is deleted
		// but if we use truncate command when only data will be erased structure remain present
		// truncate free space
		
		// major difference is truncate v/s drop is :
		//  when we use drop it will never rollback
		//  when we use truncate it will be rollback
			
<--------------------   JOINS OPERATION   -------------------->
		
		<-----     INNER JOIN OPERATION     ----->
		
		//it will return only common data from both table
		select u.id,u.name,u.city from user u inner join school s on u.id=s.sid;


		<-----     LEFT OUTER JOIN OPERATION     ----->
		
		//it will return all record of left table which is school and common part from user table
		select s.sname,s.saddress,u.name from school s left join user u on s.sid=u.id;

		
		<-----     RIGHT OUTER JOIN OPERATION     ----->
		
		//it will return all record of right table which is user and common part from school table if common not find then null will be there
		select u.name,s.sname,s.saddress from school s right join user u on u.id=s.sid;

		
		<-----     FULL OUTER JOIN OPERATION     ----->
		
		select id,name,city from user full join school on id=school.sid;
		
		
		<-----     CROSS JOIN OPERATION     ----->
		
		//it will return all record whether it is not find common data on both table then it will return null
		select  * from user cross join school;  

		
		<-----     SELF JOIN OPERATION     ----->
		
		// it will search result on self table with comparison
		select u1.name,u2.name from user u1,user u2 where u1.name=u2.name;
		
<--------------------   WILD  CARDs   -------------------->

	There are two wild card in sql mainly : 
	1. _ (underscore)
	2. % (percentage)
	
	example : select name from user where name like 'a%';
			 
			 output : anurag	
				
	example : select name from user where name like '_i%';
		
			output : rishu
					 vikku
					 
<--------------------   GROUP BY   -------------------->

	example : SELECT NAME, SUM(SALARY) FROM CUSTOMERS GROUP BY NAME;
	
<--------------------   ORDER BY   -------------------->	

	// This is used for sorting
	// There are two types of order : 1. asc (ascending) , 2.desc (descending)
	// bydefault it is ascending order
	example : select * from user order by id desc;
	example : select * from user order by name;
		
<--------------------   HAVING CLAUSE   -------------------->
		
	// This is used we want to use aggregate function twice
	//  	or
	// The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions
	example : select count(name) as 'Total name',name,city from user having count(id)>1;
			
<--------------------   UNION   -------------------->		

	//The UNION operator selects only distinct values by default. 
	//To allow duplicate values, use UNION ALL:
	example : select * from user union select * from school;
		
<--------------------   AGGREGATE FUNCTIONS   -------------------->
		
	// for perform special function over table
	list : min(),max(),count(),avg(),sum()
	
	// average will not work on string datatypes
		
<--------------------   STORED PROCEDURE   -------------------->

	// This is just like a function
	// write once and use many time
	syntax :
	// Delimiter use to terminate the procedure with symbol like //,$$,';',@@ and so on
	// which is your choice but in end specify this delimiter with END
	// Parenthesis after procedure_name and delimiter is mandatory for mysql
	// and set delimiter in last otherwise it will assign first delimiter for all
	// This is not for SQL because in sql default delimiter is semi-colon (;) so no need to specify
	// calling procedure with call procedure_name(parameter);
	// calling in SQL with exec procedure_name(parameter);
	// FOR Getting All Procedure : show procedure status where name like '%all';
	// FOR DELETING PROCEDURE : drop procedure fetchall; // without parenthesis otherwise error
	
	SYNTAX : 
	
		DELIMITER // 
		CREATE PROCESURE PROCEDURE_NAME(PARAMETER DATATYPE)
		BEGIN
			......... CODE GOES HERE......
		END //
		DELIMITER ;   // if we not set this in the end ; then all procedure created with // by default
			
	example : WITH NO PARAMETER
	
	1.) delimiter //
	create procedure getALl()
	begin
		select * from user;
	end //
	delimiter ;

	call getAll(); // This is for Calling Procedure
	
	2.) delimiter //
		create procedure fetchall()
		begin
			select user.*,school.* from user inner join school on user.id=school.sid;
		end //
		delimiter ;

		call fetchall();

	example : WITH INPUT PARAMETER (by default in keyword is there ,write or not !!)
	
	1.) delimiter //
	create procedure user_getid(in userid integer)
	begin
		select * from user where id=userid;
	end //
	delimiter ;

	call user_getid(3);
	
	2.)delimiter //
	create procedure getname(in username varchar(20))
	begin
		select * from user where name=username;
	end //
	delimiter ;

	call getname('rishu');
	
	3.)delimiter //
	create procedure getnameWithId(username varchar(20),userid int)
	begin
		select * from user where name=username and id=userid;
	end //
	delimiter ;

	call getnameWithId('rishu',1);
	
	4.) delimiter //
	create procedure getEvenOdd(num integer)
	begin
		if num%2=0 then 
		select 'Number is even' AS Result;
		else
		select 'Number is odd' AS Result;
		end if;
	end //
	delimiter ;

	call getEvenOdd(4);
	
	example : WITH OUTPUT PARAMETER use @variable for store return value and then use this @variable with select statement for getting result
	
	1.) delimiter //
	create procedure getUserCount(out countid int)
	begin
		select count(*) into countid from user;
	end //
	delimiter ;

	call getUserCount(@Total_User);
	select @Total_User;
	
	2.) SET keyword use for set the value in variable 
	
	delimiter //
	create procedure getSum(in num1 int, in num2 int, out result int)
	begin
		set result = num1+num2;
	end //
	delimiter ;

	call getSum(10,20,@sum);
	select @sum;
	
	3.) delimiter //
	create procedure update_number(num int)
	begin
		set num=num+1;
	    select num;
	end //
	delimiter ;

	set @n=20; // seting the value
	call update_number(@n); // it will return updated value that is 21
	select @n;  // it will return 20 the set value
	
	4.)
	delimiter //
	create procedure update_num(out n int)
	begin
		set n=5;
	end //
	delimiter ;

	set @n=20; // update the value of n in procedure
	call update_num(@n);
	select @n;

	Note : we can not ALTER the procedure or body of stored procedure using statement
	to make such changement you need to drop procedure and recreate them
	
	//This is one of the drawback of MYSQL


<--------------------   CASE STATEMENT   -------------------->

	// This is just like a if-else condition
	select orderid,quantity,
	case
		when quantity > 30 then 'the quantity is greater than 30'
	    when quantity = 30 then 'the quantity is 30'
	    else 'the quantity is under 30'
	end as quantitytext
	from orderdetails;
	
	
<--------------------   TRIGGERs   -------------------->

	Link : https://www.youtube.com/watch?v=PGMfmXt1nN0
	
	// A MYQSL trigger is executed or fired whenever an event associated with a table occurs e.g.- insert,update,delete
	// Trigger is called automatically when a data modification event is made against a table
	
	Syntax : 
	
	DELIMITER //
	CREATE TRIGGER TRIGGER_NAME 
	TRIGGER_TIME	// for specific interval
	TRIGGER_EVENT	// for specific event like after insert before delete etc
	ON TABLE_NAME
	FOR EACH ROW	// for all detected changement on row
	BEGIN
	  ...... CODE WRITE HERE ......
	END //
	DELIMITER ;
	
	example : first need to create table where you record activity for my case it is emp_audit
	
	1.)
	
	create table emp(id int primary key auto_increment, name varchar(50), age int);
	select * from emp;

	create table emp_audit(id int primary key auto_increment, audit_description varchar(500));

	delimiter //
	create trigger empwatch
	after insert
	on emp
	for each row
	begin 
		insert into emp_audit values(null,concat('A new row inserted at ', date_format(now(), '%d-%m-%y %h:%i:%s %p') ));
	end //
	delimiter ;

	insert into emp values(null,'rishabh',24);
	select * from emp_audit;

	2.) use declare for declare variable and new for assigning like this operator (this.x=x)
	
	delimiter //
	create trigger empwatch1
	after insert
	on emp
	for each row
	begin 
		declare u_id int;
	    set u_id=new.id;
		insert into emp_audit values(null,concat('A new row inserted with id ',u_id,' At ', date_format(now(), '%d-%m-%Y %h:%i:%s %p') ));
	end //
	delimiter ;

	insert into emp values(null,'anurag',25);
	select * from emp_audit;
	
	3.)	after update event
	
	delimiter //
	create trigger empWatchAfterUpdate
	after update
	on emp
	for each row
	begin 
		declare inserted_user_name varchar(20);
    	declare deleted_user_name varchar(20);
		set inserted_user_name=new.name;
	    set deleted_user_name=old.name;
		insert into emp_audit values(null,concat('A name ',deleted_user_name,' is replaced with ',inserted_user_name,' At ', date_format(now(), '%d-%m-%Y %h:%i:%s %p') ));
	end //
	delimiter ;

	update emp set name='anuraa' where id=2;
	select * from emp_audit;
	
	4.) Before Insert event
	
	delimiter //
	create trigger empBeforeInsert
	before insert 
	on emp
	for each row
	begin
		declare emp_age int;
    	set emp_age=new.age;
    	if emp_age < 18 then
    	signal sqlstate '45000' set message_text='You are not eligible';  // this line is for generating error on console window
	    end if;
	end //
	delimiter ;

	insert into emp values(null,'rohit',15);
	select * from emp_audit;
	
	Note : for deleting trigger use : drop trigger trigger_name;
	


